using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using TaskService.Models;
using TaskService.Services;
using Microsoft.AspNetCore.Authorization;

namespace TaskService.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class TasksController : ControllerBase
    {
        private readonly TaskServices _service;

        public TasksController(TaskServices service)
        {
            _service = service;
        }

        [HttpGet("Get Role and email")]
        [Authorize]
        public IEnumerable<string> Get()
        {
            var token = this.User;

            return new string[]
            {
                token.FindFirst("Role").Value,
                token.FindFirst("Username").Value
            };
        }

        [HttpPost("soldering-sandblasting")]
        [Authorize(Roles = "Solderer")]
        public ActionResult PerformSolderingAndSandblasting(int orderId, [FromBody] SolderingandBlastingRequest f)
        {
            _service.SolderingandSandblasting(orderId, f.level, f.note);
            return Ok();
        }

        [HttpPost("Painting")]
        [Authorize(Roles = "Painter")]
        public async Task<ActionResult> PerformPainting(int orderId, [FromBody] PaintingRequest p)
        {
            try
            {
                var r = await _service.Painting(orderId, p.color, p.type, p.note);
                return Ok(r);
            }
            catch (ArgumentException ex)
            {
                return BadRequest(ex.Message);
            }
        }

        [HttpPost("Packaging")]
        [Authorize(Roles = "PackagingWorker")]
        public async Task<ActionResult> PerformPackaging(int orderId, [FromBody] PackagingRequest q)
        {
            try
            {
                var r = await _service.Packaging(orderId, q.inspectionRating, q.note);
                return Ok(r);
            }
            catch (ArgumentException ex)
            {
                return BadRequest(ex.Message);
            }
        }

        [HttpGet("all Status")]
        [Authorize(Roles = "Manager")]
        public async Task<ActionResult<List<Models.Task>>> GetAllTasks()
        {
            var tasks = await _service.GetAllTasks();
            return Ok(tasks);
        }

        [HttpGet("sandblast-and-solder-status/{orderId}")]
        [Authorize(Roles = "Manager,Solderer")]
        public async Task<ActionResult<string>> GetSandblastAndSolderStatus(int orderId)
        {
            var status = await _service.SandblastSolderstatusByOrderId(orderId);

            if (status == null)
            {
                return NotFound();
            }

            return Ok(status);
        }

        [HttpGet("painting-status/{orderId}")]
        [Authorize(Roles = "Manager,Painter")]
        public async Task<ActionResult<string>> GetPaintingStatusByOrderId(int orderId)
        {
            var status = await _service.PaintingstatusbyOrderId(orderId);

            if (status == null)
            {
                return NotFound();
            }

            return Ok(status);
        }

        [HttpGet("packaging-status/{orderId}")]
        [Authorize(Roles = "Manager,PackagingWorker")]
        public async Task<ActionResult<string>> GetPackagingStatusByOrderId(int orderId)
        {
            var status = await _service.PackagingstatusbyOrderId(orderId);

            if (status == null)
            {
                return NotFound();
            }

            return Ok(status);
        }

        [HttpGet("order-status/{orderId}")]
        [Authorize(Roles = "Manager")]
        public async Task<ActionResult<string>> GetOrderCurrentStatus(int orderId)
        {
            var status = await _service.GetOrderStatus(orderId);

            if (status == null)
            {
                return NotFound();
            }

            return Ok(status);
        }

        [HttpPost("delete-task/{orderId}")]
        [Authorize(Roles = "Manager")]
        public async Task<IActionResult> DeleteTask(int orderId)
        {
            try
            {
                await _service.DeleteTask(orderId);
                return Ok("Task deleted successfully");
            }
            catch (ArgumentException ex)
            {
                return NotFound(ex.Message);
            }
            catch (Exception ex)
            {
                return StatusCode(500, $"Internal server error: {ex.Message}");
            }
        }
    }
}
